---
title: "04_describe"
format: html
editor: visual
---

## Library

```{r 04_library, message=FALSE, running=FALSE}
library(tidyverse)
library(ggplot2)
library(here)

```

## Load data

```{r 04_load, message=FALSE, running=FALSE}
df_intensities <- read_tsv(file = here("data/02_df_intensities.tsv.gz"))

df_log_intensities <- read_tsv(file = here("data/03_df_log_intensities.tsv.gz"))

df_norm_intensities <- read_tsv(file = here("data/03_df_norm_intensities.tsv.gz"))

df_feature_wise <- read_tsv(file = here("data/03_df_feature_wise.tsv.gz"))

df_sample_wise <- read_tsv(file = here("data/03_df_sample_wise.tsv.gz"))


```

## The Data Set

We are working with an unpublished proteomics dataset from a research group on DTU. We have recieved permission to work with the data for the R for Bio Data Science Project. The dataset relates to a study that can be read about in this preprint. (insert link here).

In the study, proteomics by mass spectrometry was applied to FACS-sorted populations of hematopoietic stem- and progenitor cells from the mouse bone marrow. Five populations were isolated based on known surface marker expression: Hematopoietic stem cells (HSC), common lymphoid progenitors (CLP), common myeloid progenitors (CMP), megakaryocyte-erythrocyte progenitors (MEP) and granulocyte-monocyte progenitors (GMP). According to literature, these cell populations represent different stages of hematopoiesis, meaning the differentiation of HSC into the different blood cell lineages. For each cell type, 500 cells were isolated in 4 replicates, except for CLP having 5 replicates. The sorted cells were lysed, digested with trypsin, and subjected to proteomics by mass spectrometry in data-independent acquisition (DIA) mode. Therefore our raw data consists of LS/MS DIA intensity values of identified protein groups (PG).

| Cell Type                   | HSC  | CMP  | GMP  | CLP  | MEP  | Total |
|-----------------------------|------|------|------|------|------|-------|
| No. of observations         | 2196 | 1986 | 2291 | 2382 | 2691 | 3765  |
| No. of replicates (samples) | 4    | 4    | 4    | 5    | 4    | 21    |

: Table 1: Number of replicates and observations across replicates for the analysed FACS-populations

```{r}
# simple bar chart with total number protein groups per cell type
df_norm_intensities |> 
  mutate(
    cell_type = factor(cell_type, levels=(c("clp", "gmp", "mep", "cmp", "hsc"))),
    cell_type = fct_recode(cell_type, 
                         "HSC" = "hsc",
                         "CMP" = "cmp",
                         "MEP" = "mep",
                         "GMP" = "gmp",
                         "CLP" = "clp")) |> 
  filter(!is.na(intensity)) |> 
  group_by(protein_groups) |> 
  distinct(cell_type, .keep_all=TRUE) |> 
  ggplot(mapping = aes(y=cell_type)) +
  geom_bar(aes(fill = cell_type), width = 0.7) +
  geom_text(stat = "count", aes(label = ..count..), hjust = 1.3, size = 6, color = "white") +
  theme_classic() +
  theme(
    axis.text.x = element_text(size = 16),
    axis.text.y = element_text(size = 16),
    axis.title.x = element_text(size = 12),
    axis.title.y = element_text(size = 12)
  ) +
  guides(fill = "none") +
  xlab("Protein Groups") +
  ylab("Population")
```

### Data completeness: Percentage of missing values

For many downstream analyses, it is important to know the data completeness, meaning the percentage of non-NA values in the data.

```{r}
# print percentage of missing values for each cell type
df_norm_intensities |> 
  group_by(cell_type) |> 
  summarise(total_NA = sum(is.na(intensity)),
            total_non_NA = sum(!is.na(intensity))) |> 
  mutate(data_completeness = total_non_NA/(total_NA + total_non_NA))
```

We can see that we have only about 50 percent data completeness for each cell type. This makes sense, because the proteome changes with differentiation.

### Investigate shared observations between cell types

To understand the proteomic changes over the course of stem cell differentiation, it is helpful to calculate the overlap of the PG's identified in each cell type. This has implications for further data processing, guiding decisions like handling of NA's.

```{r}

# make vectors of ID's in every cell type

list_hsc <- df_intensities |> 
  filter(cell_type=="hsc") |> 
  filter(!is.na(intensity)) |> 
  pull(protein_groups) |> 
  unique()

list_cmp <- df_intensities |> 
  filter(cell_type=="cmp") |> 
  filter(!is.na(intensity)) |> 
  pull(protein_groups) |> 
  unique()

list_gmp <- df_intensities |> 
  filter(cell_type=="gmp") |> 
  filter(!is.na(intensity)) |> 
  pull(protein_groups) |> 
  unique()

list_clp <- df_intensities |> 
  filter(cell_type=="clp") |> 
  filter(!is.na(intensity)) |> 
  pull(protein_groups) |> 
  unique()

list_mep <- df_intensities |> 
  filter(cell_type=="mep") |> 
  filter(!is.na(intensity)) |> 
  pull(protein_groups) |> 
  unique()

# Make list intersection to see number of protein groups in samples of all cell types
combined_lists <- list(list_hsc, list_clp, list_cmp, list_gmp, list_cmp)

# Find the intersection of all lists
intersection <- reduce(combined_lists, intersect)
print(str_c(" There are ", length(intersection), " protein groups detected across all cell types"))
```

The intersection of PG's across all cell types only consists of 1473 PG's, which is only a fraction of all 3765 PG's observed in the data set. This makes sense, as during differentiation, the proteome changes, driving differentiation and defining the differentiated cell types. With changing proteome, many PG's become so low abundant, that they fall below the limit of detection. It is therefore essential to preserve PG's in this data set, even though they are only observed in a subset of cell types. Careful imputation of missing values, instead of dropping them, is imperative.

## Log2 Transformation

Plot of the PG intensity density prior to Log2 transformation

```{r 04_intensities}

df_intensities |> 
  mutate(sample = str_c(cell_type,
                        replicate_n,
                        sep ="_"),.before = cell_type) |>
  ggplot(aes(x=intensity, colour = sample)) +
  geom_density() +
  theme_classic()+
  labs(title = "Density of Intensity", subtitle = "Prior to Log2 Transformation") 
```

As seen in the plot, the PG intensities span a large dynamic range. For the reasons explained before, we log2-transformed the data.

Plot of the PG intensity density after Log2 transformation

```{r 04_log1}

df_log_intensities |>
    mutate(sample = str_c(cell_type,
                        replicate_n,
                        sep ="_"),.before = cell_type) |> 
  ggplot(aes(x=intensity, colour = sample)) +
  geom_density() +
  theme_classic()+
  labs(title = "Density of log2-transformed Intensity", subtitle = "Before Normalization")
  ggsave(filename = "plot_before_normalization,.png",
       width = 20, height = 10, units = "cm",
       path = here("results"))
```

```{r 04_log2}
df_log_intensities |>  
    mutate(sample = str_c(cell_type,
                        replicate_n,
                        sep ="_"),.before = cell_type) |> 
  group_by(sample) |> 
  summarize(median(intensity, na.rm = TRUE))
```

The intensities now follow a log-normal distribution. However, we can see that the medians of the sample densities differ. For the reasons explained before, we normalized the PG intensities on the sample median.

## Normalization

Plot of the PG intensity density after Log2 transformation and normalization

```{r 04_norm1}
df_norm_intensities |> 
    mutate(sample = str_c(cell_type,
                        replicate_n,
                        sep ="_"),.before = cell_type) |> 
  ggplot(aes(x=intensity,
  colour = sample)) +
  geom_density() +
  theme_classic()+
  labs(title = "Density of log2-transformed Intensity", subtitle = "After Normalization to the Median Value")
  ggsave(filename = "plot_after_normalization,.png",
       width = 20, height = 10, units = "cm",
       path = here("results"))
```

```{r 04_norm2}
df_norm_intensities |>
  mutate(sample = str_c(cell_type,
                      replicate_n,
                      sep ="_"),.before = cell_type) |> 
  group_by(sample) |> 
  summarize(median(intensity, na.rm = TRUE))
```

We can now observe identical medians of 1 for all samples.

## Missing Value Imputation

As explained before, NA's need to be replaced by meaningful values. We explored two options:\
sample-wise and feature-wise imputation.

### Sample-wise imputation

```{r 04_sample_wise}
df_sample_wise |>
  mutate(sample = str_c(cell_type,
                        replicate_n,
                        sep ="_"),.before = cell_type) |> 
  ggplot(aes(x=intensity, colour = sample)) +
  geom_density() +
  theme_classic()+
  labs(title = "Density of log2-transformed Intensity", subtitle = "When NA's are imputeted sample-wise")
```

We can observe a heavy distortion of the density plots in all samples, provoked by replacing NA's sample-wise. This is not necessarily bad, as we needed the log-normal distribution to calculate the z-scores for replacement.

### Feature-wise imputation

```{r 04_feature_wise}
df_feature_wise |>
  mutate(sample = str_c(cell_type,
                        replicate_n,
                        sep ="_"),.before = cell_type) |> 
  ggplot(aes(x=intensity, colour = sample,
             color = replicate_n)) +
  geom_density() +
  theme_classic()+
  labs(title = "Density of log2-transformed Intensity", subtitle = "When NA's are imputeted feature-wise")
```

We observe a less apparent distortion of the density plots, instead of a new global maximum at the 0.1 percentile mark, we have left-skewed densities.\
\
Choice of NA imputation: We need to base our decision on the nature of the data we are working with. Both strategies would produce meaningful replacement values for NA's. Because the missingness in our data is MNAR, we chose sample-wise imputation, as it accounts better for biological missingness in DIA data.

## Protein type lookup

To get deeper insight in our data, we wanted to explore how many proteins in each sample are involved in regulation of gene expression. We follow the central dogma of biology, consisting of transcription, mRNA processing, translation and protein degradation. One way to do that is by systematic lookup of gene ontology (GO) terms or pathways in data bases like uniprot. Because we're limited to few packages, we did not make use of the uniprot API, to access the data base directly. Instead, we downloaded a tsv file with all reviewed mouse proteins, to do a manual lookup. For simplicity, we used uniprot keywords instead of GO terms or pathways. This is mainly a showcase of a manual lookup, instead of a solid biological interrogation.

```{r}
# load mouse uniprot db file for lookup

df_uniprot_mouse <- read_tsv(file = here("data/01_dat_load_uniprot_mouse.tsv"))
```

```{r}
# make function for manual keyword lookup

uniprot_lookup <- function(gene_id, dataframe, id_column, keyword_column){
  ## function that takes in string x and looks for string pattern in uniprot dataframe, giving back the value in keyword column.
  Keywords <- dataframe |> 
  filter(str_detect({{id_column}}, gene_id)) |> 
  pull({{keyword_column}}) |> 
  str_c(collapse ='; ')
  return(Keywords)
}

# make new data frame with keyword column, using unipro_lookup to lookup keywords for all found proteins in the uniprot file. This will take a reasonable amount of time (about 3 minutes).

df_type <- df_norm_intensities |> 
  filter(!is.na(genes) & genes != "") |> 
  mutate(description_column = map_chr(
     .x = genes,
     .f = ~uniprot_lookup(gene_id=.x, dataframe=df_uniprot_mouse, id_column=`Gene Names`, keyword_column=Keywords)
   ))
```

```{r}
# Make rule for presence in a sample: needs to be present in at least 2 replicates

df_type <- df_type |> 
  group_by(protein_groups, cell_type) |> 
  filter(sum(!is.na(intensity)) >= 2) |> 
  ungroup()
```

```{r}
# make column with extracted keywords (selected by us)

df_type <- df_type |> 
  mutate(
    keyword_function = case_when(
      str_detect(description_column, "Transcription regulation") ~ "Transcription regulation",
      str_detect(description_column, "mRNA splicing") ~ "mRNA splicing",
      str_detect(description_column, "Translation regulation") ~ "Translation regulation",
      str_detect(description_column, "Proteasome") ~ "Proteasome",
      TRUE ~ NA
    )
  ) 
```

```{r}
# make simple grouped bar plot to show absolute numbers of protein groups for each keyword category across cell types

df_type |> 
  mutate(
    cell_type = factor(cell_type, levels=(c("hsc", "cmp", "mep", "gmp", "clp"))),
    cell_type = fct_recode(cell_type, 
                         "HSC" = "hsc",
                         "CMP" = "cmp",
                         "MEP" = "mep",
                         "GMP" = "gmp",
                         "CLP" = "clp")) |>
  filter(!is.na(keyword_function)) |> 
  ggplot(mapping = aes(x=cell_type, fill=keyword_function)) +
  geom_bar(position = position_dodge()) +
  theme_classic() +
  theme(
  axis.text.x = element_text(size = 16),
  axis.text.y = element_text(size = 16),
  axis.title.x = element_text(size = 12),
  axis.title.y = element_text(size = 12)) +
  xlab("Population") +
  ylab("Number Protein Groups")
```

Those results do not reflect common knowledge about proteomics data of gene regulation. Although transcription factors make up 10% of protein-coding genes and are therefore the biggest functional group of proteins, they are usually low expressed and not easily picked up by low-input proteomics. Especially since only about 3700 protein groups were detected in this data set. It seems that uniprot keywords are very broad descriptions of protein function, e.g. include proteins in "Transcription regulation" that are active in pathways remotely connected to this term.

It should be noted that the performance of the lookup is bad, as it takes considerable time to complete it. Reason is that for every protein group in our data, the whole uniprot data frame is parsed. This is suboptimal, however the only solution we could come up with to do the pattern matching of proteins in the protein groups. If this wasn't necessary, a simple join could be made which would increase performance considerably.
