---
title: "Cleaning Data"
format: html
editor: visual
---

## Loading libraries

```{r, message=FALSE, running=FALSE}
library("tidyverse")
library("here")
```

## Loading data

```{r, message=FALSE, running=FALSE}
# read in csv files for all cell populations

df_hsc <- read_tsv(file = here("data/01_hsc.tsv"), na="NA")
df_mep <- read_tsv(file = here("data/01_mep.tsv"), na="NA")
df_gmp <- read_tsv(file = here("data/01_gmp.tsv"), na="NA")
df_clp <- read_tsv(file = here("data/01_clp.tsv"), na="NA")
df_cmp <- read_tsv(file = here("data/01_cmp.tsv"), na="NA")


#| echo: false
#| eval: false
```

### Joining Dataframes

There are five dataframes, one for each of the five cell types/stages: hsc, clp, cmp, mep, gmp. They must be joined together into one. We use full join because we wish to preserve all data points.

```{r}

# do full join to preserve data. The combination of PG.ProteinGroups and PG.Genes is the same for all data frames, so we join by both columns

df_intensities <- df_hsc |> 
  full_join(df_clp, by=c("PG.ProteinGroups", "PG.Genes")) |> 
  full_join(df_cmp, by=c("PG.ProteinGroups", "PG.Genes")) |> 
  full_join(df_mep, by=c("PG.ProteinGroups", "PG.Genes")) |>
  full_join(df_gmp, by=c("PG.ProteinGroups", "PG.Genes")) 


```

### Changing Variable Names

For increased readability variable names are changed to define the cell type and specify the replicate number. Note! The replicates are technical replicates.

```{r}
# get column names
print(colnames(df_intensities))

# We have four replicates per cell type. Change all column names at once for easier readability.
df_intensities <- 
  setNames(df_intensities, c("protein_groups",
                             "genes",
                             "hsc_rep_1",
                             "hsc_rep_2",
                             "hsc_rep_3",
                             "hsc_rep_4",
                             "clp_rep_1",
                             "clp_rep_2",
                             "clp_rep_3",
                             "clp_rep_4",
                             "clp_rep_5",
                             "cmp_rep_1",
                             "cmp_rep_2",
                             "cmp_rep_3",
                             "cmp_rep_4",
                             "mep_rep_1",
                             "mep_rep_2",
                             "mep_rep_3",
                             "mep_rep_4",
                             "gmp_rep_1",
                             "gmp_rep_2",
                             "gmp_rep_3",
                             "gmp_rep_4"))
```


## Elongating the dataframe

There are four or five technical replicates of each of the 5 cell types, making up a total of 21 variables - all with measures of intensity. We use pivot_longer to lengthen the data so that there is one intensity column and one 'sample' column specifying which replicate and which cell type is referred to.

```{r}
df_intensities <- df_intensities |> 
  pivot_longer(
    #all the replicate columns will be stored in an intensity column and a sample column
    cols = !starts_with(c("protein","genes")), 
    names_to = "sample", 
    values_to = "intensity"
  )
```

### Separating the samples column into replicate number and cell type

We separate the one column into two columns in order to allow for more flexibility when augmenting the data in 03_augment.

```{r}
df_intensities <- df_intensities |> 
  separate(sample, into = c("cell_type","replicate_n"), sep = "_rep_")
  

```

### Final table sample output.

Here's a snippet of how the long format of the proteomics data is organized

```{r}
sample_n(df_intensities,10)

```

## Write to tsv

```{r}

# produce file 02_df_intensities.tsv
# Directing pathway to store the .tsv  file

data_path <- here("data")
write_tsv(df_intensities, str_c(data_path, "02_df_intensities.tsv.gz",sep = "/"))

#Writing and saving the clean dataframe to 02_df_clean.tsv.



```

## Conclusion

Now the data is tidied - meaning each cell has only one value, each observation is in its own row and each variable is in a column. Now the data needs to be log-transformed, normalized and NA's must be dealt with based on the normalization, which will all happen in the augment.
