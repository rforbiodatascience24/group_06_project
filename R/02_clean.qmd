---
title: "Magdas_version"
format: html
editor: visual
---

```{r}
library("tidyverse")
library("here")
```

### Load data

```{r}

df_hsc <- read_tsv(file = here("data/01_dat_load_hsc.tsv"))
df_mep <- read_tsv(file = here("data/01_dat_load_mep.tsv"))
df_gmp <- read_tsv(file = here("data/01_dat_load_gmp.tsv"))
df_clp <- read_tsv(file = here("data/01_dat_load_clp.tsv"))
df_cmp <- read_tsv(file = here("data/01_dat_load_cmp.tsv"))

```

## Missing in this document

-   write to tsv.gz

-   deal with redundant protein and gene ID's

## Joining Dataframes

There are five dataframes, one for each of the five cell types: hsc, clp, cmp, mep, gmp. They must be joined together into one. We use full join because we wish to preserve all data points.

```{r}

# do full join to preserve data. The combination of PG.ProteinGroups and PG.Genes is the same for all data frames, so we join by both columns

df_ful <- df_hsc |> 
  full_join(df_clp, by=c("PG.ProteinGroups", "PG.Genes")) |> 
  full_join(df_cmp, by=c("PG.ProteinGroups", "PG.Genes")) |> 
  full_join(df_mep, by=c("PG.ProteinGroups", "PG.Genes")) |>
  full_join(df_gmp, by=c("PG.ProteinGroups", "PG.Genes")) 

#Remove raw data frames from environment
remove(list=c(df_clp,df_cmp,df_mep,df_gmp))
```

## Changing Variable Names

For increased readability variable names are changed to define the cell type and specify the replicate.

```{r}
# get column names
print(colnames(df_ful))

# We have four replicates per cell type. Change all column names at once for easier readability.
df_ful <- setNames(df_ful, c("protein_groups",
                             "genes",
                             "hsc_rep_1",
                             "hsc_rep_2",
                             "hsc_rep_3",
                             "hsc_rep_4",
                             "clp_rep_1",
                             "clp_rep_2",
                             "clp_rep_3",
                             "clp_rep_4",
                             "clp_rep_5",
                             "cmp_rep_1",
                             "cmp_rep_2",
                             "cmp_rep_3",
                             "cmp_rep_4",
                             "mep_rep_1",
                             "mep_rep_2",
                             "mep_rep_3",
                             "mep_rep_4",
                             "gmp_rep_1",
                             "gmp_rep_2",
                             "gmp_rep_3",
                             "gmp_rep_4"))
```

## Shortening Protein and Gene Names to Contain One String per Cell

The variables protein_groups and genes in some cases contain multiple names. The reason for this is that if a cell contains more than one protein name (fx "Q8BSP2;Q8BSP2-2;Q8BSP2-3") it is because they are protein isomers, and there is no means of discerning which of protein isomers is actually measured. For the purpose of tidy data we decide to keep only the first name in that column, and a `_group`*\`* is added to signify that more isomers were there in the original dataset (fx "Q8BSP2_group"). The same procedure is applied to the 'genes' variable.

```{r}
  #str_split_i splits the protein isomers separated by the delimiter ; and keeps only the "first protein isomer_group"
df_ful <- df_ful |> 
    mutate(
      protein_groups = case_when(
        #returns TRUE when the delimiter ; is detected
      str_detect(protein_groups,pattern = ";") ~
        #in which case only the first string is kept and _group is added
      str_c(str_split_i(protein_groups,";",1), "_group"),
      #if the delimiter ; was not detected the original string value is kept
      .default = protein_groups
      ),
      #the same as above is repeated for genes variable
      genes = case_when(
        str_detect(genes,pattern = ";") ~
        str_c(str_split_i(genes,";",1), "_group"),
        .default = genes
        )
    )
```

## Lengthening the Data

There are four or five replicates of each cell type, that are currently stored as 21 variables all with measures of intensity. We use pivot_longer to lengthen the data so that there is one intensity column and one 'sample' column specifying which replicate and which cell type is referred to.

```{r}
df_long <- df_ful |> 
  pivot_longer(
    #all the replicate columns will be stored in an intensity column and a sample column
    cols = !starts_with(c("protein","genes")), 
    names_to = "sample", 
    values_to = "intensity"
  )
```

Separating the samples column into replicate number and cell type

```{r}
df_long <- df_long |> 
  separate(sample, into = c("cell_type","replicate_n"), sep = "_rep_", remove = FALSE)
  

```

### Present table of sample values

```{r}
sample_n(df_long,10)

```

## Write to tsv

```{r}
# produce file 02_dat_clean.tsv

df_long_clean <- df_long

project_path = here()
setwd(project_path)
write_tsv(df_long_clean, "data/02_dat_clean.tsv")
```

## Conclusion

Now the data is tidied - meaning each cell has only one value, each observation is in its own row and each variable is in a column. Now the data needs to be log-transformed, normalized and NA's must be dealt with based on the normalization, which will all happen in the augment.
