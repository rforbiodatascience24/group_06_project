---
title: "Proteomics Data from Murine Blood Cells"
subtitle: "A Collaborative Data Science Project by Group 6"
editor: visual
format:
  revealjs:
    self-contained: true
    theme: white
    number: true
---

## Introduction to the data {.smaller}

-   Unpublished data from research group at DTU

-   Proteomics data showing differentiation trajectories in murine hematopoiesis

-   Intensity measured by spectrometry gives protein expression

-   Objective: "Examine differences in protein expression across the differentiation trajectory of the Different Cell Types"

    ![](images/cell_types.jpeg)

## Data tidying and data format {.smaller}

-   5 dataframes joined using  `full_join()` 

-   variable names are simplified

-   Each sample was a variable we used  `pivot_longer()`  to get just one intensity column

    | Cell Type                   | HSC  | CMP  | GMP  | CLP  | MEP  | Total |
    |-----------------------------|------|------|------|------|------|-------|
    | No. of protein goups        | 2196 | 1986 | 2291 | 2382 | 2691 | 3765  |
    | No. of replicates (samples) | 4    | 4    | 4    | 5    | 4    | 21    |

    ```{r}
    library("here")
    library("tidyverse")
    df_sample_wise <- read_tsv(file = str_c(here("data"), "03_df_sample_wise.tsv.gz", sep = "/"))
    sample_n(df_sample_wise,4)
    ```

## Augmenting the data <br>

::: columns
::: {.column width="40%"}
-   log2 transformation<br><br><br>

-   Normalization<br><br><br>

-   Missing value imputation<br><br><br>
:::

::: {.column width="60%"}
![](images/plot_before_normalization,.png){width="600"}

![](images/plot_after_normalization,.png){width="600"}<br><br><br>
:::
:::

## Augmenting data for principal component analysis

``` {.r style="font-size: 0.7em"}
#Pivot to wider format for principal component analysis 
df_feature_wide\<- df_sample_wise \|\> 
  mutate(intensity = unname(intensity)) \|\>
  pivot_wider(id_cols = c(cell_type,replicate_n),
              names_from = 'protein_groups', 
              values_from = 'intensity') \|\> 
  select(where(\~ !any(is.na(.)))) #Selects only columns without N/A

#Get numerical inputs 
df_input \<- df_feature_wide \|\> 
  select(-c('replicate_n','cell_type'))

#Group datapoints by cell types 
colourby \<- pull(df_feature_wide, 'cell_type')

#Projecting data unto principal components (pc) 
pc \<- prcomp(df_input, center = FALSE, scale = FALSE)
```

## PCA Results {auto-animate="true"}

![](images/PCA_on_proteingroups_original.png){.absolute top="150" left="0" width="500" height="350"}

![](images/pca_variance_barplot.png){.absolute top="150" right="0" width="500" height="350"}

## Volcano - augmentation {.smaller}

::: nonincremental
-   calculation of mean value and standard deviation
-   switching to wider dataframe (better for computation of fold and T test)
-   creating new dataframe using a function
:::

```{r}

library("tidyverse")
library("here")

df_sample_mean<- read_tsv(file = str_c(here("data"), "03_df_sample_mean.tsv.gz", sep = "/")) 

sample_n(df_sample_mean, 5)

```

``` {.r style="font-size: 0.7em"}
volcano_augment <- function(df, later_cell, earlier_cell, n_later, n_earlier){

. . .
  return(data_set_for_visualisation)
})
```

```{r}
df_volcano_cmp_hsc <- read_tsv(file = str_c(here("data"), "df_volcano_cmp_hsc.tsv.gz", sep = "/")) 

sample_n(df_volcano_cmp_hsc, 5)
```

## Volcano - visualisation {.smaller}

::: nonincremental
-   log2(fold) vs log10(q_values) plot is a rule of thumb in proteomics
:::

::: panel-tabset
### HSC - CMP

![](images/hsc_cmp_volcano_plot.png)

### CMP -MEP

![](images/cmp_mep_volcano_plot.png)

### CMP- GMP

![](images/cmp_gmp_volcano_plot.png)

### HSC - CLP

![](images/hsc_clp_volcano_plot.png)
:::

## Uniprot lookup <br>

::: nonincremental
``` {.r style="font-size: 0.7em"}
uniprot_lookup <- function(gene_id, dataframe, id_column, keyword_column){
  # does lookup in uniprot df and returns Keywords
  return(Keywords)
}

df_type <- df_norm_intensities |> 
  filter(!is.na(genes) & genes != "") |> 
  mutate(description_column = map_chr(
     .x = genes,
     .f = ~uniprot_lookup(gene_id=.x, 
                          dataframe=df_uniprot_mouse, 
                          id_column=`Gene Names`, keyword_column=Keywords)
   ))
```

![](images/plot_uniprot-02.png)
:::

::: incremental
## Discussion {.smaller}

*Data may take many shapes and forms*

-   TidyverseR is nice and structured, but can also be restricting.

-   Some functions necessary like the t.test is for BaseR and not TidyR - making it difficult.

    *Principal Component Analysis showed cell differentiation*

-   The PCA in this case can be used to identify the cell differentiation pattern

-   This is in line with what was presented in literature for this data.

    *Volcano plot and lookup to find overexpressed proteins*

-   Through the volcano plots we can filter and identify the truly overexpressed proteins, which can then be looked up and studied for biological significance.

-   While we don't concldue any high level biological understanding, we showcase the possibility of using TidyverseR to extrapolate biological information
:::

::: incremental
## Conclusion {.smaller}

*While we have been going through many internal frustrations, we have been able to...*

-   We have created code that is able to load, tidy and transform and visualize data containing 3700 observations across 5 cell types - and extrapolating biological meaning.

-   Create 2 functions that can create dataframes for volcanoplots, and 1 lookk up function to annotate keywords for protein groups.

-   The project has been successful in it's main intend, which is to showcase a pipeline for understanding cell differentiation.

-   For future projects/studies, a higher number of observations and cell-types could be included to increase the resolution. The overall pipeline can be used with other cell-types - like humans.
:::
