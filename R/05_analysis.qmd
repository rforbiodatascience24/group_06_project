---
title: "05_analysis"
format: html
editor: visual
---

## Data Analysis

### PCA

### Volcano plots (pairwise)

## Function that computes p-value

Creating a function that finds the p-value based on the two sample students t.test

```{r}
##Compute the p-value as a tail propability in the t-distribution. pvalue=2*P(T>|tobs|). pt is the cdf distribution, so the propability that T is smaller than or equal to tobs is given by
#mu is mean. n is no of replicates. s is standard deviation. 
pval <- function(mu1,mu2,n1,n2,s1,s2){
  tobs <- ((mu1-mu2)-0)/sqrt((s1^2)/n1+(s2^2)/n2)
  df <- (((s1^2)/n1+(s2^2)/n2)^2)/((((s1^2)/n1)^2)/(n1-1)+(((s2^2)/n2)^2)/(n2-1))
  pvalue <- 2*(1-pt(abs(tobs), df=df))
  return(pvalue)
  }

```

## Lasse is testing methods to apply the t.test

```{r}
# Lasse stuff

df_no_na_long |> 
  group_by(protein_groups, cell_type)

# create a tibble with mean values and standard deviation
df_no_na_long |> 
  group_by(protein_groups, cell_type) |> # take the mean/sd of of the replicates for the protein groups and cell types.
  summarise(
    p_value = t.test()
    )
df_mean_intensitities

wide <- flot |> 
  pivot_wider(names_from = cell_type,
              values_from = intensity,
              values_fn = mean) # the pivot_wider finds duplicate values for intentcity, this is a way to mitigate that issue.

# Lasse tried to map the p-value t.test in a cool way
wide |> 
group_by(genes) |>
  mutate(ttest = map(.x = hsc,
                     .f = ~ t.test(.x,
                                   alternative = c("two.sided",
                                                   "less",
                                                   "greater"),
                                   conf.level = 0.99)))
```

```{r}
# Antonio pivoted wider and creatd a log2foldchange
df_mean_intensitities |> 
  select(!sd) |> 
  pivot_wider(names_from = cell_type, values_from = mean) |> 
  select(!gmp & !hsc & !mep) |> 
  mutate(fold = cmp/clp) 

```

## Histogram

```{r}
# Histogram that shows distribution of the fold
ggplot(test_plot, aes(x=fold))+
  geom_histogram()+
  scale_x_continuous(limits = c(0.75, 1.25))
```

```{r}
#creating a new label-variable which takes values for gene for significant genes only and otherwise leaves it as "" otherwise there would be waaaay too many (>2000) gene names 

test_plot <- df_mean_intensitities |> 
pivot_wider(names_from = cell_type, values_from = c(mean, sd)) |> 
  select(mean_gmp, mean_hsc, sd_gmp, sd_hsc) |> 
  mutate(fold = mean_gmp/mean_hsc) |> 
  mutate(pval = pval(mean_gmp,mean_hsc,4,4,sd_gmp,sd_hsc)) |> 
  select(protein_groups,fold,pval)


library(ggrepel) 
test_plot |>
  mutate(label = case_when(fold > 1 ~ protein_groups, fold < 1 ~ "")) |>
  ggplot(aes(x = log2(fold), y = desc(log10(pval))))+
  geom_point(size=1, alpha = 0.5)+
  geom_text_repel(aes(label = label), size = 3)+
  theme_minimal()+ labs(title = "GMP/HSC", subtitle = "Proteins that were more expressed in GMP are highlighted", x = "fold", y = "-log10(p)", caption = "proteomics data")+
  theme(legend.position = "none", plot.title = element_text(hjust = 1), plot.subtitle = element_text(hjust = 1))+
  geom_hline(yintercept = 2)

```
