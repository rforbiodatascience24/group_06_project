---
title: "04_describe"
format: html
editor: visual
---

## Library

```{r}
library(tidyverse)
library(UpSetR)
```

## Load Data

```{r}

# Intermediate data processing files
df_long <- read_tsv(file = here("data/03_dat_intermediate_1_clean.tsv"))
df_log_long <- read_tsv(file = here("data/03_dat_intermediate_2_log.tsv"))
df_norm_long <- read_tsv(file = here("data/03_dat_intermediate_3_norm.tsv"))

# processed data files for downstream analysis
df_no_na_long_1 <- read_tsv(file = here("data/03_dat_aug_long_1.tsv"))
df_no_na_long_2 <- read_tsv(file = here("data/03_dat_aug_long_2.tsv"))
df_no_na_wide <- read_tsv(file = here("data/03_dat_aug_wide.tsv"))
```

## The Data Set

In this study, proteomics by mass spectrometry was applied to FACS-sorted populations of hematopoietic stem- and progenitor cells from the mouse bone marrow. Five populations were isolated based on known surface marker expression: Hematopoietic stem cells (HSC), common lymphoid progenitors (CLP), common myeloid progenitors (CMP), megakaryocyte-erythrocyte progenitors (MEP) and granulocyte-monocyte progenitors (GMP). According to literature, these cell populations represent different stages of hematopoiesis, meaning the differentiation of HSC into the different blood cell lineages. For each cell type, 500 cells were isolated in 4 replicates, except for CLP having 5 replicates. The sorted cells were lysed, digested with trypsin, and subjected to proteomics by mass spectrometry in data-independent acquisition (DIA) mode. Therefore our raw data consists of LS/MS DIA intensity values of identified protein groups (PG).

| Cell Type                   | HSC  | CMP  | GMP  | CLP  | MEP  | Total |
|-----------------------------|------|------|------|------|------|-------|
| No. of observations         | 2196 | 1986 | 2291 | 2382 | 2691 | 3765  |
| No. of replicates (samples) | 4    | 4    | 4    | 5    | 4    | 21    |

: Table 1: Number of replicates and observations across replicates for the analysed FACS-populations

### Investigate shared observations between cell types with UpSetPlot

To understand the proteomic changes over the course of stem cell differentiation, it is helpful to visualize the overlap of the PG's identified in each cell type. This has implications for further data processing, guiding decisions like handling of NA's.

```{r}

# make vectors of ID's in every cell type

list_hsc <- df_long |> 
  filter(cell_type=="hsc") |> 
  filter(!is.na(intensity)) |> 
  pull(protein_groups) |> 
  unique()

list_cmp <- df_long |> 
  filter(cell_type=="cmp") |> 
  filter(!is.na(intensity)) |> 
  pull(protein_groups) |> 
  unique()

list_gmp <- df_long |> 
  filter(cell_type=="gmp") |> 
  filter(!is.na(intensity)) |> 
  pull(protein_groups) |> 
  unique()

list_clp <- df_long |> 
  filter(cell_type=="clp") |> 
  filter(!is.na(intensity)) |> 
  pull(protein_groups) |> 
  unique()

list_mep <- df_long |> 
  filter(cell_type=="mep") |> 
  filter(!is.na(intensity)) |> 
  pull(protein_groups) |> 
  unique()

# make list of vectors for UpSetPlot input

list_input <- list(HSC=list_hsc, CMP=list_cmp, GMP=list_gmp, CLP=list_clp, MEP=list_mep)
```

Make UpSetPlot to visualize overlapping PG sets

```{r}
upset(fromList(list_input), order.by = "freq")
```

As seen in the plot, the biggest intersection of PG is between all cell types. This intersection however only consists of 1353 PG's, which is only a fraction of all 3765 PG's observed in the data set. This makes sense, as during differentiation, the proteome changes, driving differentiation and defining the differentiated cell types. With changing proteome, many PG's become so low abundant, that they fall below the limit of detection. It is therefore essential to preserve PG's in this data set, even though they are only observed in a subset of cell types. Careful imputation of missing values, instead of dropping them, is imperative.

## Log2 Transformation

Plot of the PG intensity density prior to Log2 transformation

```{r}

df_long |> 
  ggplot(aes(x=intensity, colour = sample)) +
  geom_density() +
  theme_classic()

```

As seen in the plot, the PG intensities span a large dynamic range. For the reasons explained before, we log2-transformed the data.

Plot of the PG intensity density after Log2 transformation

```{r}

df_log_long |> 
  ggplot(aes(x=intensity, colour = sample)) +
  geom_density() +
  theme_classic()
```

```{r}
df_log_long |> 
  group_by(sample) |> 
  summarize(median(intensity, na.rm = TRUE))
```

The intensities now follow a log-normal distribution. However, we can see that the medians of the sample densities differ. For the reasons explained before, we normalized the PG intensities on the sample median.

## Normalization

Plot of the PG intensity density after Log2 transformation and normalization

```{r}
df_norm_long |> 
  ggplot(aes(x=intensity, colour = sample)) +
  geom_density() +
  theme_classic()
```

```{r}
df_norm_long |> 
  group_by(sample) |> 
  summarize(median(intensity, na.rm = TRUE))
```

We can now observe identical medians of 1 for all samples.

## Missing Value Imputation

As explained before, NA's need to be replaced by meaningful values. We explored two options:\
sample-wise and feature-wise imputation.

### Sample-wise imputation

```{r}
df_no_na_long_1 |> 
  ggplot(aes(x=intensity, colour = sample)) +
  geom_density() +
  theme_classic()
```

We can observe a heavy distortion of the density plots in all samples, provoked by replacing NA's sample-wise. This is not necessarily bad, as we needed the log-normal distribution to calculate the z-scores for replacement.

### Feature-wise imputation

```{r}
df_no_na_long_2 |> 
  ggplot(aes(x=intensity, colour = sample)) +
  geom_density() +
  theme_classic()
```

We observe a less apparent distortion of the density plots, instead of a new global maximum at the 0.1 percentile mark, we have left-skewed densities.\
\
Choice of NA imputation: We need to base our decision on the nature of the data we are working with. Both strategies would produce meaningful replacement values for NA's. Because the missingness in our data is MNAR, we chose sample-wise imputation, as it accounts better for biological missingness in DIA data.

## Protein type lookup

```{r}

# load mouse uniprot db file for lookup
df_uniprot_mouse <- read_tsv(file = here("data/01_dat_load_uniprot_mouse.tsv"))
```

```{r}
# pseudo code

# custom_function <- function(x, y){
## function that takes in string x and looks for string pattern in uniprot tibble y, giving back the value in keyword column.
Keywords <- df_y |> 
  filter(str_detect(Entry, x)) |> 
  pull(Keywords)
  

# df_norm_long |> 
# mutate(description_column = map_chr(
#   .x = Proteins,
#   .f = custom_function(.x)

```

```{r}
Keywords <- df_uniprot_mouse |> 
  filter(str_detect('P02301;P68433;P84228;P84244', Entry)) |> 
  pull(Keywords) |> 
  str_c(collapse ='; ')
```

```{r}

uniprot_lookup <- function(pg_id, dataframe, id_column, keyword_column){
  ## function that takes in string x and looks for string pattern in uniprot tibble y, giving back the value in keyword column.
  Keywords <- dataframe |> 
  filter(str_detect(pg_id, id_column)) |> 
  pull(keyword_column) |> 
  str_c(collapse ='; ')
  return(Keywords)
}

  
df_test <- df_norm_long |> 
  mutate(description_column = map_chr(
     .x = protein_groups,
     .f = ~uniprot_lookup(pg_id=.x, dataframe=df_uniprot_mouse, id_column="Entry", keyword_column="Keywords")
   ))
```

```{r}
# debug with dummy 
uniprot_lookup <- function(pg_id, dataframe, id_column, keyword_column){
  ## function that takes in string x and looks for string pattern in uniprot tibble y, giving back the value in keyword column.
  Keywords <- dataframe |> 
  filter(str_detect(pg_id, id_column)) |> 
  pull(keyword_column) |> 
  str_c(collapse ='; ')
  return(Keywords)
}

  
df_test <- df_norm_long |> 
  mutate(description_column = map_chr(
     .x = protein_groups,
     .f = ~uniprot_lookup(pg_id=.x, dataframe=df_uniprot_mouse, id_column="Entry", keyword_column="Keywords")
))
```
