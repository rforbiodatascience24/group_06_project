---
title: "02_clean"
format: html
editor: visual
---

## Clean Data

#### 1. Combine data frames into one

```{r}

# do full join to preserve data. The combination of PG.ProteinGroups and PG.Genes is the same for all data frames, so we join by both columns

df_ful <- df_hsc |> 
  full_join(df_clp, by=c("PG.ProteinGroups", "PG.Genes")) |> 
  full_join(df_cmp, by=c("PG.ProteinGroups", "PG.Genes")) |> 
  full_join(df_mep, by=c("PG.ProteinGroups", "PG.Genes")) |>
  full_join(df_gmp, by=c("PG.ProteinGroups", "PG.Genes")) 
```

#### 2. Change column names for readability

```{r}

# get column names
print(colnames(df_ful))

# We can easily see how many replicates we have per cell type. Change all column names at once
df_ful <- setNames(df_ful, c("ProteinGroups",
                             "Genes",
                             "HSC_rep_1",
                             "HSC_rep_2",
                             "HSC_rep_3",
                             "HSC_rep_4",
                             "CLP_rep_1",
                             "CLP_rep_2",
                             "CLP_rep_3",
                             "CLP_rep_4",
                             "CLP_rep_5",
                             "CMP_rep_1",
                             "CMP_rep_2",
                             "CMP_rep_3",
                             "CMP_rep_4",
                             "MEP_rep_1",
                             "MEP_rep_2",
                             "MEP_rep_3",
                             "MEP_rep_4",
                             "GMP_rep_1",
                             "GMP_rep_2",
                             "GMP_rep_3",
                             "GMP_rep_4"))
```

#### Optionally pivot longer the data

```{r}
df_long <- df_ful |> 
  pivot_longer(
    #all the replicate columns will be stored in an intensity column and a sample column
    cols = !starts_with(c("Protein","Genes")), 
    names_to = "sample", 
    values_to = "intensity"
  )
```

We notice that the df_ful has 3763 observations (rows) of 23 variables and the df_long has 79023 observations of 4 variables.

#### 3. Log2-transform the data

The data is Log2 transformed for every numeric value in the dataframe with pseudo-count of 1 (to avoid zeros and negative values), to compress the range of intensities and achieve a log-normal distribution.

```{r}

# 

df_log <- df_ful |> 
  mutate(across(where(is.numeric), ~log2(. +1)))
```


```{r}
#log transform long dataframe
df_log_long <- df_long |> 
  mutate(across(where(is.numeric), ~log2(. +1)))



df_log |> 
  ggplot(mapping = aes(x = ))
```

#### 4. Normalize the data

```{r}

## Check if normalization is necessary: plot intensity distribution of each sample
#Here we use the long format of the data
# plot intensity densities of samples in one plot
df_log |> 
  pivot_longer(cols=-c("ProteinGroups", "Genes"), 
               names_to = "Sample",
               values_to = "Intensity") |> 
  ggplot(aes(x=Intensity, colour=Sample)) +
  geom_density() +
  theme_classic()
```

```{r}

## The median shifts over the samples, so normalization is necessary. We will use normalization to the median of each sample

# Make function and apply with dplyr::mutate()

NormOnMedian <- function(x){
  # divides values by median of column
  column_median <- median(x, na.rm=TRUE)
  return(x/column_median)
}

df_norm <- df_log |> 
  mutate(across(.cols = -c(ProteinGroups, Genes),
                .fns = NormOnMedian))
```

```{r}

# Test normalization with density plot --> medians are equal now

df_norm |> 
  pivot_longer(cols=-c("ProteinGroups", "Genes"), 
               names_to = "Sample",
               values_to = "Intensity") |> 
  ggplot(aes(x=Intensity, colour=Sample)) +
  geom_density() +
  theme_classic()

```

#### 5. Impute missing values

```{r}

## Use left-censor method to impute missing values. Work sample-wise.

# Make function and apply with dplyr::mutate()

NaIsMindet <- function(x){
  # replaces NA with 1st percentile of column values
  col_mean <- mean(x, na.rm=TRUE)
  col_sd <- sd(x, na.rm=TRUE)
  firstperc <- col_mean - 3.090 * col_sd # -3.090 is Z-score for 0.1st percentile
  x[is.na(x)] <- firstperc
  return(x)
}

df_nona <- df_norm |> 
  mutate(across(.cols = -c(ProteinGroups, Genes),
                .fns = NaIsMindet))

```

```{r}
# Check density -> Not ideal, many NA's distort distribution. Feature-wise would be ideal, b ut couldn't figure out how to operate NaIsMindet row-wise

df_nona |> 
  pivot_longer(cols=-c("ProteinGroups", "Genes"), 
               names_to = "Sample",
               values_to = "Intensity") |> 
  ggplot(aes(x=Intensity, colour=Sample)) +
  geom_density() +
  theme_classic()
```
