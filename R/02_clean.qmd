---
title: "Magdas_version"
format: html
editor: visual
---

```{r}
library("tidyverse")
```

## Missing in this document

-   write to tsv.gz

-   deal with redundant protein and gene ID's

## Joining Dataframes

There are five dataframes, one for each of the five cell types: hsc, clp, cmp, mep, gmp. They must be joined together into one. We use full join because we wish to preserve all data points.

```{r}

# do full join to preserve data. The combination of PG.ProteinGroups and PG.Genes is the same for all data frames, so we join by both columns

df_ful <- df_hsc |> 
  full_join(df_clp, by=c("PG.ProteinGroups", "PG.Genes")) |> 
  full_join(df_cmp, by=c("PG.ProteinGroups", "PG.Genes")) |> 
  full_join(df_mep, by=c("PG.ProteinGroups", "PG.Genes")) |>
  full_join(df_gmp, by=c("PG.ProteinGroups", "PG.Genes")) 
```

## Changing Variable Names

For increased readability variable names are changed to define the cell type and specify the replicate.

```{r}
# get column names
print(colnames(df_ful))

# We have four replicates per cell type. Change all column names at once for easier readability.
df_ful <- setNames(df_ful, c("protein_groups",
                             "genes",
                             "hsc_rep_1",
                             "hsc_rep_2",
                             "hsc_rep_3",
                             "hsc_rep_4",
                             "clp_rep_1",
                             "clp_rep_2",
                             "clp_rep_3",
                             "clp_rep_4",
                             "clp_rep_5",
                             "cmp_rep_1",
                             "cmp_rep_2",
                             "cmp_rep_3",
                             "cmp_rep_4",
                             "mep_rep_1",
                             "mep_rep_2",
                             "mep_rep_3",
                             "mep_rep_4",
                             "gmp_rep_1",
                             "gmp_rep_2",
                             "gmp_rep_3",
                             "gmp_rep_4"))
```

## Lengthening the Data

There are four or five replicates of each cell type, that are currently stored as 21 variables all with measures of intensity. We use pivot_longer to lengthen the data so that there is one intensity column and one 'sample' column specifying which replicate and which cell type is referred to.

```{r}
df_long <- df_ful |> 
  pivot_longer(
    #all the replicate columns will be stored in an intensity column and a sample column
    cols = !starts_with(c("protein","genes")), 
    names_to = "sample", 
    values_to = "intensity"
  )
```

Separating the samples column into replicate number and cell type

```{r}
df_long <- df_long |> 
  separate(sample, into = c("cell_type","replicate_n"), sep = "_rep_")
  

```

### Present table of sample values

```{r}
sample_n(df_long,10)

```

## Conclusion

Now the data is tidied - meaning each cell has only one value, each observation is in its own row and each variable is in a column. Now the data needs to be log-transformed, normalized and NA's must be dealt with based on the normalization, which will all happen in the augment.
